x-domain_conf:
  WEB_URL: &WEB_URL http://omnivore.example.fun
  API_URL: &API_URL http://api.omnivore.example.fun
  CONTENT_FETCH_URL: &CONTENT_FETCH_URL http://omnivore-content-fetch:3002/?token=CONTENT_FETCH_TOKEN

x-auth_conf: &auth_conf
  VERIFICATION_TOKEN: &VERIFICATION_TOKEN CONTENT_FETCH_TOKEN
  SSO_JWT_SECRET: &SSO_JWT_SECRET SSO_JWT_SECRET
  JWT_SECRET: &JWT_SECRET JWT_SECRET

x-imageproxy: &imageproxy_conf
  IMAGE_PROXY_URL: omnivore-imageproxy:8080
  IMAGE_PROXY_SECRET: &IMAGE_PROXY_SECRET IMAGE_PROXY_SECRET

x-pg_conf: &pg_conf
  PG_HOST: omnivore-postgres
  POSTGRES_USER: postgres # admin username
  POSTGRES_PASSWORD: &POSTGRES_PASSWORD postgres # admin password
  PG_USER: app_user
  PG_PASSWORD: app_pass
  PG_DB: omnivore
  PG_POOL_MAX: 20

x-redis_url: &redis_url
  REDIS_URL: redis://omnivore-redis:6379
  MQ_REDIS_URL: redis://omnivore-mq:6379

x-minio_conf: &minio_conf
  MINIO_HOST: omnivore-minio
  MINIO_PORT: 9000
  MINIO_USERNAME: &minio_user minioadmin
  MINIO_PASSWORD: &minio_password minioadminpasswd

services:
  postgres:
    image: "ankane/pgvector:v0.5.1"
    container_name: "omnivore-postgres"
    restart: unless-stopped
    user: postgres
    healthcheck:
      test: "exit 0"
      interval: 2s
      timeout: 12s
      retries: 3

    environment:
      << : *pg_conf
    ports:
      - 5432:5432
    expose:
      - 5432
    volumes:
      - pg_data:/var/lib/postgresql/data

  migrate:
    build:
      context: .
      dockerfile: ./packages/db/Dockerfile
    container_name: "omnivore-migrate"
    command: '/bin/sh ./packages/db/setup.sh' # Also create a demo user with email: demo@omnivore.app, password: demo_password
    environment:
      << : *pg_conf
      PGPASSWORD: *POSTGRES_PASSWORD # psql need this
    depends_on:
      postgres:
        condition: service_healthy

  redis:
    image: redis:alpine3.20
    container_name: "omnivore-redis"
    restart: unless-stopped
    ports:
      - 6379:6379
    expose:
      - 6379
    volumes:
      - redis_data:/data
  
  mq:
    image: redis:alpine3.20
    container_name: "omnivore-mq"
    restart: unless-stopped
    ports:
      - 6380:6379
    expose:
      - 6379
    volumes:
      - mq_data:/data

  pubsub:
    image: google/cloud-sdk:emulators
    container_name: "omnivore-pubsub"
    command: /bin/bash -c "gcloud beta emulators pubsub start --project=omnivore --host-port='0.0.0.0:8085'"
    ports:
      - 8085:8085
    expose:
      - 8085

  jaeger:
    image: jaegertracing/jaeger:latest
    container_name: "omnivore-jaeger"
    ports:
      - 16686:16686
      - 4317:4317
      - 4318:4318
      - 5778:5778
      - 9411:9411

  minio:
    image: quay.io/minio/minio
    container_name: "omnivore-minio"
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: *minio_user
      MINIO_ROOT_PASSWORD: *minio_password
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - minio_data:/data

  api:
    build:
      context: .
      dockerfile: ./packages/api/Dockerfile
    container_name: "omnivore-api"
    ports:
      - 4000:4000 # server port
      - 3002:3002 # queue-processor port
      - 3003:3003 # export-processor port
    expose:
      - 4000
    healthcheck:
      test: ["CMD-SHELL", "nc -z 0.0.0.0 4000 || exit 1"]
      interval: 15s
      timeout: 90s
    environment:
      << : [*pg_conf, *redis_url, *minio_conf, *imageproxy_conf]
      API_ENV: prod
      PG_PORT: 5432
      JAEGER_HOST: omnivore-jaeger
      JWT_SECRET: *JWT_SECRET
      SSO_JWT_SECRET: *SSO_JWT_SECRET
      CLIENT_URL: *WEB_URL
      GATEWAY_URL: http://omnivore-api:4000/api
      CONTENT_FETCH_URL: *CONTENT_FETCH_URL
      GCS_UPLOAD_BUCKET: omnivore-bucket
      PUBSUB_EMULATOR_HOST: http://omnivore-pubsub:8085
    depends_on:
      migrate:
        condition: service_completed_successfully

  content-fetch:
    build:
      context: .
      dockerfile: ./packages/content-fetch/Dockerfile
    container_name: "omnivore-content-fetch"
    expose:
      - 3002
    environment:
      << : [*redis_url, *minio_conf]
      CHROMIUM_PATH: /usr/bin/chromium
      LAUNCH_HEADLESS: true 
      VERIFICATION_TOKEN: *VERIFICATION_TOKEN
      JWT_SECRET: *JWT_SECRET
      REST_BACKEND_ENDPOINT: http://omnivore-api:4000/api

  web:
    build:
      context: .
      dockerfile: ./packages/web/Dockerfile
      args:
        APP_ENV: prod
        BASE_URL: *WEB_URL # e.g. http://omnivore.domain.com
        SERVER_BASE_URL: *API_URL # e.g. http://api.omnivore.domain.com
        HIGHLIGHTS_BASE_URL: *WEB_URL # e.g. http://omnivore.domain.com
    container_name: "omnivore-web"
    ports:
      - 3001:8080
    environment:
      NEXT_PUBLIC_APP_ENV: prod
      NEXT_PUBLIC_BASE_URL: *WEB_URL # e.g. http://omnivore.domain.com
      NEXT_PUBLIC_SERVER_BASE_URL: *API_URL # e.g. http://api.omnivore.domain.com
      NEXT_PUBLIC_HIGHLIGHTS_BASE_URL: *WEB_URL # e.g. http://omnivore.domain.com
    depends_on:
      api:
        condition: service_healthy

  imageproxy:
    build:
      context: .
      dockerfile: ./imageproxy/Dockerfile
    container_name: "omnivore-imageproxy"
    expose:
      - 1234

volumes:
  pg_data:
  redis_data:
  mq_data:
  minio_data: